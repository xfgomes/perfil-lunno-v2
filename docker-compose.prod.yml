version: "3.9"

services:
  db:
    image: postgres:16
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 10

  backend:
    build: ./backend
    restart: always
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET_KEY: 2e1918fc385bea0446fae0d57fd6584f
      OPENAI_API_KEY: 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
      OPENAI_MODEL: gpt-4o-mini-2024-07-18
      FRONTEND_URL: ${FRONTEND_URL}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  frontend:
    build: ./frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "8080:80"

  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend_build:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"

volumes:
  db_data:
  frontend_build:
